// Generated by CoffeeScript 1.9.2

/*! Nwang 0.0.3 //// MIT Licence //// http://nwang.richplastow.com/ */

(function() {
  var Main, Tudor, tudor, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªW, ªX, ªex, ªhas, ªredefine, ªtype, ªuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªC = 'Nwang';

  ªV = '0.0.3';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ªW = this;

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z0-9]+)/i)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      if (config == null) {
        config = {};
      }
      this.xx = null;
    }

    Main.prototype.sf3 = function(x) {
      var M, tx, u;
      M = '/nwang/src/class-main.litcoffee:Main:sf3()\n  ';
      tx = typeof x;
      if (ªN === tx) {
        if (-10000 > x) {
          throw RangeError(M + "`x` is < -10000");
        }
        if (-1000 > x) {
          return String.fromCharCode(0xAFE8 + Math.round(x / 10));
        }
        if (-100 > x) {
          return String.fromCharCode(0xB36C + Math.round(x));
        }
        if (-10 > x) {
          return String.fromCharCode(0xB6F0 + Math.round(x * 10));
        }
        if (-1 > x) {
          return String.fromCharCode(0xBA74 + Math.round(x * 100));
        }
        if (-0.1 > x) {
          return String.fromCharCode(0xBDF8 + Math.round(x * 1000));
        }
        if (0.1 > x) {
          return String.fromCharCode(0xC17C + Math.round(x * 10000));
        }
        if (1 > x) {
          return String.fromCharCode(0xC500 + Math.round(x * 1000));
        }
        if (10 > x) {
          return String.fromCharCode(0xC884 + Math.round(x * 100));
        }
        if (100 > x) {
          return String.fromCharCode(0xCC08 + Math.round(x * 10));
        }
        if (1000 > x) {
          return String.fromCharCode(0xCF8C + Math.round(x));
        }
        if (10000 >= x) {
          return String.fromCharCode(0xD310 + Math.round(x / 10));
        }
        if (x !== x) {
          throw RangeError(M + "`x` is not a number");
        }
        throw RangeError(M + "`x` is > 10000");
      }
      if (ªS === tx) {
        u = x.charCodeAt(0);
        if (0xAC00 > u) {
          throw RangeError(M + "`x` codepoint " + u + " < " + 0xAC00);
        }
        if (0xAF85 > u) {
          return '' + ((u - 0xAFE8) * 10);
        }
        if (0xB309 > u) {
          return '' + (u - 0xB36C);
        }
        if (0xB68D > u) {
          return ((u - 0xB6F0) * 0.1).toFixed(1);
        }
        if (0xBA11 > u) {
          return ((u - 0xBA74) * 0.01).toFixed(2);
        }
        if (0xBD95 > u) {
          return ((u - 0xBDF8) * 0.001).toFixed(3);
        }
        if (0xC564 > u) {
          return ((u - 0xC17C) * 0.0001).toFixed(4);
        }
        if (0xC8E8 > u) {
          return ((u - 0xC500) * 0.001).toFixed(3);
        }
        if (0xCC6C > u) {
          return ((u - 0xC884) * 0.01).toFixed(2);
        }
        if (0xCFF0 > u) {
          return ((u - 0xCC08) * 0.1).toFixed(1);
        }
        if (0xD374 > u) {
          return '' + (u - 0xCF8C);
        }
        if (0xD6F8 >= u) {
          return '' + ((u - 0xD310) * 10);
        }
        if (u !== u) {
          throw RangeError(M + "`x` is an empty string");
        }
        throw RangeError(M + "`x` codepoint " + u + " > " + 0xD6F8);
      }
      throw TypeError(M + "`x` is " + tx + " not number|string");
    };

    return Main;

  })();

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

  Tudor = (function() {
    Tudor.prototype.I = 'Tudor';

    Tudor.prototype.toString = function() {
      return "[object " + I + "]";
    };

    Tudor.prototype.articles = [];

    function Tudor(opt) {
      this.opt = opt != null ? opt : {};
      this["do"] = bind(this["do"], this);
      switch (this.opt.format) {
        case 'html':
          this.pageHead = function(summary) {
            return "<style>\n  body     { font-family: sans-serif; }\n  a        { outline: 0; }\n  b        { display: inline-block; width: .7em }\n\n  b.pass              { color: #393 }\n  b.fail              { color: #bbb }\n  article.fail b.pass { color: #bbb }\n  section.fail b.pass { color: #bbb }\n\n  pre      { padding: .5em; margin: .2em 0; border-radius: 4px; }\n  pre.fn   { background-color: #fde }\n  pre.pass { background-color: #cfc }\n  pre.fail { background-color: #d8e0e8 }\n\n  article  { margin-bottom: .5rem }\n  article h2 { padding-left:.5rem; margin:0; font-weight:normal }\n  article.pass { border-left: 5px solid #9c9 }\n  article.fail { border-left: 5px solid #9bf }\n  article.fail h2 { margin-bottom: .5rem }\n  article.pass >div { display: none }\n\n  section  { margin-bottom: .5rem }\n  section h3   { padding-left: .5rem; margin: 0; }\n  section.pass { border-left: 3px solid #9c9 }\n  section.fail { border-left: 3px solid #9bf }\n  section.fail h3 { margin-bottom: .5rem }\n  section.pass >div { display: none }\n\n  article.fail section.pass { border-left-color: #ccc }\n\n  div      { padding-left: .5em; }\n  div.fail { border-left: 3px solid #9bf; font-size: .8rem }\n  div h4   { margin: 0 }\n  div h4 { font: normal .8rem/1.2rem monaco, monospace }\n  div.fail, div.fail h4 { margin: .5rem 0 }\n\n</style>\n<h4><a href=\"#end\" id=\"top\">\u2b07</a>  " + summary + "</h4>";
          };
          this.pageFoot = function(summary) {
            return "<h4><a href=\"#top\" id=\"end\">\u2b06</a>  " + summary + "</h4>\n<script>\n  document.title='" + (summary.replace(/<\/?[^>]+>/g, '')) + "';\n</script>";
          };
          this.articleHead = function(heading, fail) {
            return ("<article class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h2>" + (fail ? this.cross : this.tick) + heading + "</h2><div>");
          };
          this.articleFoot = '</div></article>';
          this.sectionHead = function(heading, fail) {
            return ("<section class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h3>" + (fail ? this.cross : this.tick) + heading + "</h3><div>");
          };
          this.sectionFoot = '</div></section>';
          this.jobFormat = function(heading, result) {
            return ("<div class=\"" + (result ? 'fail' : 'pass') + "\">") + ("<h4>" + (result ? this.cross : this.tick) + heading + "</h4>") + ("" + (result ? this.formatError(result) : '')) + "</div>";
          };
          this.tick = '<b class="pass">\u2713</b> ';
          this.cross = '<b class="fail">\u2718</b> ';
          break;
        default:
          this.pageHead = function(summary) {
            return "" + summary;
          };
          this.pageFoot = function(summary) {
            return "\n" + summary;
          };
          this.articleHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n===" + (new Array(heading.length).join('=')) + "\n";
          };
          this.articleFoot = '';
          this.sectionHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n---" + (new Array(heading.length).join('-')) + "\n";
          };
          this.sectionFoot = '';
          this.jobFormat = function(heading, result) {
            return ((result ? this.cross : this.tick) + " " + heading) + ("" + (result ? '\n' + this.formatError(result) : ''));
          };
          this.jobFoot = '';
          this.tick = '\u2713';
          this.cross = '\u2718';
      }
    }

    Tudor.prototype.add = function(lines) {
      var article, i, line, runner, section;
      article = {
        sections: []
      };
      runner = null;
      section = null;
      if (ªA !== ªtype(lines)) {
        throw new Error("`lines` isn’t an array");
      }
      if (0 === lines.length) {
        throw new Error("`lines` has no elements");
      }
      if (ªS !== ªtype(lines[0])) {
        throw new Error("`lines[0]` isn’t a string");
      }
      article.heading = lines.shift();
      i = 0;
      while (i < lines.length) {
        line = lines[i];
        switch (ªtype(line)) {
          case ªO:
            if (!line.runner) {
              throw new Error("Errant object");
            }
            runner = line.runner;
            break;
          case ªF:
            section.jobs.push(line);
            break;
          case ªS:
            if (this.isAssertion(lines[i + 1], lines[i + 2])) {
              if (!section) {
                throw new Error("Cannot add an assertion here");
              }
              section.jobs.push([runner, line, lines[++i], lines[++i]]);
            } else {
              section = {
                heading: line,
                jobs: []
              };
              article.sections.push(section);
            }
        }
        i++;
      }
      return this.articles.push(article);
    };

    Tudor.prototype["do"] = function() {
      var actual, art, artFail, artPass, article, e, error, expect, heading, j, job, k, l, len, len1, len2, mock, mockFail, pge, pgeFail, pgePass, ref, ref1, ref2, result, runner, sec, secFail, secPass, section, summary;
      pge = [];
      mock = null;
      pgePass = pgeFail = mockFail = 0;
      ref = this.articles;
      for (j = 0, len = ref.length; j < len; j++) {
        article = ref[j];
        art = [];
        artPass = artFail = 0;
        ref1 = article.sections;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          section = ref1[k];
          sec = [];
          secPass = secFail = 0;
          ref2 = section.jobs;
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            job = ref2[l];
            switch (ªtype(job)) {
              case ªF:
                try {
                  mock = job.apply(this, mock);
                } catch (_error) {
                  e = _error;
                  error = e.message;
                }
                if (error) {
                  mockFail++;
                  secFail++;
                  sec.push(this.formatMockModifierError(job, error));
                }
                break;
              case ªA:
                runner = job[0], heading = job[1], expect = job[2], actual = job[3];
                result = runner(expect, actual, mock);
                if (!result) {
                  sec.push(this.jobFormat("" + (this.sanitize(heading))));
                  pgePass++;
                  artPass++;
                  secPass++;
                } else {
                  sec.push(this.jobFormat("" + (this.sanitize(heading)), result));
                  pgeFail++;
                  artFail++;
                  secFail++;
                }
            }
          }
          sec.unshift(this.sectionHead("" + (this.sanitize(section.heading)), secFail));
          sec.push(this.sectionFoot);
          art = art.concat(sec);
        }
        art.unshift(this.articleHead("" + (this.sanitize(article.heading)), artFail));
        art.push(this.articleFoot);
        pge = pge.concat(art);
        summary = pgeFail ? this.cross + " FAILED " + pgeFail + "/" + (pgePass + pgeFail) : this.tick + " Passed " + pgePass + "/" + (pgePass + pgeFail);
        if (mockFail) {
          summary = "\n" + this.cross + " (MOCK FAILS)";
        }
      }
      pge.unshift(this.pageHead(summary));
      pge.push(this.pageFoot(summary));
      return pge.join('\n');
    };

    Tudor.prototype.formatError = function(result) {
      switch (result.length + "-" + this.opt.format) {
        case '2-html':
          return result[0] + "\n<pre class=\"fail\">" + (this.sanitize(result[1].message)) + "</pre>";
        case '2-plain':
          return result[0] + "\n" + (this.sanitize(result[1].message));
        case '3-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + "</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + "</pre>";
        case '3-plain':
          return (this.sanitize(this.reveal(result[0]))) + "\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2])));
        case '4-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")</pre>";
        case '4-plain':
          return (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")";
        default:
          throw new Error("Cannot process '" + result.length + "-" + this.opt.format + "'");
      }
    };

    Tudor.prototype.formatMockModifierError = function(fn, error) {
      switch (this.opt.format) {
        case 'html':
          return "<pre class=\"fn\">" + (this.sanitize(fn + '')) + "</pre>\n...encountered an exception:\n<pre class=\"fail\">" + (this.sanitize(error)) + "</pre>";
        default:
          return (this.sanitize(fn + '')) + "\n...encountered an exception:\n" + (this.sanitize(error));
      }
    };

    Tudor.prototype.reveal = function(value) {
      return value != null ? value.toString().replace(/^\s+|\s+$/g, function(match) {
        return '\u00b7' + (new Array(match.length)).join('\u00b7');
      }) : void 0;
    };

    Tudor.prototype.sanitize = function(value) {
      switch (this.opt.format) {
        case 'html':
          return value != null ? value.toString().replace(/</g, '&lt;') : void 0;
        default:
          return value;
      }
    };

    Tudor.prototype["throw"] = {
      runner: function(expect, actual, mock) {
        var e, error;
        error = false;
        try {
          actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (!error) {
          return [
            'No exception thrown, expected', {
              message: expect
            }
          ];
        } else if (expect !== error.message) {
          return [error.message, 'was thrown, but expected', expect];
        }
      }
    };

    Tudor.prototype.equal = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== result) {
          if (result + '' === expect + '') {
            return [result, 'was returned, but expected', expect, true];
          } else {
            return [result, 'was returned, but expected', expect];
          }
        }
      }
    };

    Tudor.prototype.is = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== ªtype(result)) {
          return ["type " + (ªtype(result)), 'was returned, but expected', "type " + expect];
        }
      }
    };

    Tudor.prototype.match = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (ªF !== typeof expect.test) {
          return [
            '`test()` is not a function', {
              message: expect
            }
          ];
        } else if (!expect.test('' + result)) {
          return ['' + result, 'failed test', expect];
        }
      }
    };

    Tudor.prototype.isAssertion = function(line1, line2) {
      if (ªF !== ªtype(line2)) {
        return false;
      }
      if ((ªO === ªtype(line1)) && ªF === ªtype(line1.runner)) {
        return false;
      }
      return true;
    };

    return Tudor;

  })();

  tudor = new Tudor({
    format: ªO === typeof window ? 'html' : 'plain'
  });

  Main.runTest = tudor["do"];

  tudor.add([
    "01 Nwang Constructor Usage", tudor.is, "The class and instance are expected types", "The Nwang class is a function", ªF, function() {
      return Main;
    }, "`new` returns an object", ªO, function() {
      return new Main;
    }
  ]);

  tudor.add([
    "02 sf3() Three Significant Figures", "The method is, and returns, expected types", tudor.is, function() {
      return [new Main];
    }, "sf3() is a function", ªF, function(nwang) {
      return nwang.sf3;
    }, "pass a number to get a string", ªS, function(nwang) {
      return nwang.sf3(123);
    }, "pass a string to _also_ get a string", ªS, function(nwang) {
      return nwang.sf3('\uBCDEabc');
    }, "Throws errors as expected", tudor["throw"], "pass a boolean", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is boolean not number|string", function(nwang) {
      return nwang.sf3(true);
    }, "-Infinity is too low", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is < -10000", function(nwang) {
      return nwang.sf3(-Infinity);
    }, "-123456 is too low", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is < -10000", function(nwang) {
      return nwang.sf3(-123456);
    }, "-10000.0001 is too low", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is < -10000", function(nwang) {
      return nwang.sf3(-10000.0001);
    }, "Infinity is too high", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is > 10000", function(nwang) {
      return nwang.sf3(Infinity);
    }, "23456 is too high", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is > 10000", function(nwang) {
      return nwang.sf3(23456);
    }, "10000.0001 is too high", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is > 10000", function(nwang) {
      return nwang.sf3(10000.0001);
    }, "NaN is, er, not a number", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is not a number", function(nwang) {
      return nwang.sf3(NaN);
    }, "An empty string", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` is an empty string", function(nwang) {
      return nwang.sf3('');
    }, "The codepoint of 'A' is too low", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` codepoint 65 < 44032", function(nwang) {
      return nwang.sf3('A');
    }, "The codepoint of 'U+ABFF' is too low", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` codepoint 44031 < 44032", function(nwang) {
      return nwang.sf3('\uABFF');
    }, "The codepoint of 'U+D6F9' is too high", "/nwang/src/class-main.litcoffee:Main:sf3()\n  `x` codepoint 55033 > 55032", function(nwang) {
      return nwang.sf3('\uD6F9');
    }, "Converts numbers to glyphs as expected", tudor.equal, "-10000 returns U+AC00", String.fromCharCode(0xAC00), function(nwang) {
      return nwang.sf3(-10000);
    }, "-9999.99999 also returns U+AC00", String.fromCharCode(0xAC00), function(nwang) {
      return nwang.sf3(-9999.99999);
    }, "-9995.00001 also returns U+AC00", String.fromCharCode(0xAC00), function(nwang) {
      return nwang.sf3(-9995.00001);
    }, "-9995 returns U+AC01", String.fromCharCode(0xAC01), function(nwang) {
      return nwang.sf3(-9995);
    }, "-9990 also returns U+AC01", String.fromCharCode(0xAC01), function(nwang) {
      return nwang.sf3(-9990);
    }, "-9985.00001 also returns U+AC01", String.fromCharCode(0xAC01), function(nwang) {
      return nwang.sf3(-9985.00001);
    }, "-9985 returns U+AC02", String.fromCharCode(0xAC02), function(nwang) {
      return nwang.sf3(-9985);
    }, "-1005.00001 returns U+AF83", String.fromCharCode(0xAF83), function(nwang) {
      return nwang.sf3(-1005.00001);
    }, "-1005 returns U+AF84", String.fromCharCode(0xAF84), function(nwang) {
      return nwang.sf3(-1005);
    }, "-1000.00001 also returns U+AF84", String.fromCharCode(0xAF84), function(nwang) {
      return nwang.sf3(-1000.00001);
    }, "-1000 also returns U+AF84", String.fromCharCode(0xAF84), function(nwang) {
      return nwang.sf3(-1000);
    }, "-999.9999 also returns U+AF84", String.fromCharCode(0xAF84), function(nwang) {
      return nwang.sf3(-999.9999);
    }, "-999.5001 also returns U+AF84", String.fromCharCode(0xAF84), function(nwang) {
      return nwang.sf3(-999.5001);
    }, "-999.5 returns U+AF85", String.fromCharCode(0xAF85), function(nwang) {
      return nwang.sf3(-999.5);
    }, "-999 also returns U+AF85", String.fromCharCode(0xAF85), function(nwang) {
      return nwang.sf3(-999);
    }, "-998.50001 also returns U+AF85", String.fromCharCode(0xAF85), function(nwang) {
      return nwang.sf3(-998.50001);
    }, "-101.50001 returns U+B306", String.fromCharCode(0xB306), function(nwang) {
      return nwang.sf3(-101.50001);
    }, "-101.5 returns U+B307", String.fromCharCode(0xB307), function(nwang) {
      return nwang.sf3(-101.5);
    }, "-100.50001 also returns U+B307", String.fromCharCode(0xB307), function(nwang) {
      return nwang.sf3(-100.50001);
    }, "-100.5 returns U+B308", String.fromCharCode(0xB308), function(nwang) {
      return nwang.sf3(-100.5);
    }, "-100 also returns U+B308", String.fromCharCode(0xB308), function(nwang) {
      return nwang.sf3(-100);
    }, "-99.9999 also returns U+B308", String.fromCharCode(0xB308), function(nwang) {
      return nwang.sf3(-99.9999);
    }, "-99.950001 also returns U+B308", String.fromCharCode(0xB308), function(nwang) {
      return nwang.sf3(-99.950001);
    }, "-99.95 returns U+B309", String.fromCharCode(0xB309), function(nwang) {
      return nwang.sf3(-99.95);
    }, "-99.94999 also returns U+B309", String.fromCharCode(0xB309), function(nwang) {
      return nwang.sf3(-99.94999);
    }, "-99.9 also returns U+B309", String.fromCharCode(0xB309), function(nwang) {
      return nwang.sf3(-99.9);
    }, "-99.8501 also returns U+B309", String.fromCharCode(0xB309), function(nwang) {
      return nwang.sf3(-99.8501);
    }, "-99.85 returns U+B30A", String.fromCharCode(0xB30A), function(nwang) {
      return nwang.sf3(-99.85);
    }, "-10.099 returns U+B68B", String.fromCharCode(0xB68B), function(nwang) {
      return nwang.sf3(-10.099);
    }, "-10.05123 also returns U+B68B", String.fromCharCode(0xB68B), function(nwang) {
      return nwang.sf3(-10.05123);
    }, "-10.05 returns U+B68C", String.fromCharCode(0xB68C), function(nwang) {
      return nwang.sf3(-10.05);
    }, "-10.000005 also returns U+B68C", String.fromCharCode(0xB68C), function(nwang) {
      return nwang.sf3(-10.000005);
    }, "-10 also returns U+B68C", String.fromCharCode(0xB68C), function(nwang) {
      return nwang.sf3(-10);
    }, "-9.9999 also returns U+B68C", String.fromCharCode(0xB68C), function(nwang) {
      return nwang.sf3(-9.9999);
    }, "-9.9950001 also returns U+B68C", String.fromCharCode(0xB68C), function(nwang) {
      return nwang.sf3(-9.9950001);
    }, "-9.995 returns U+B68D", String.fromCharCode(0xB68D), function(nwang) {
      return nwang.sf3(-9.995);
    }, "-9.99 also returns U+B68D", String.fromCharCode(0xB68D), function(nwang) {
      return nwang.sf3(-9.99);
    }, "-1.0051 returns U+BA0F", String.fromCharCode(0xBA0F), function(nwang) {
      return nwang.sf3(-1.0051);
    }, "-1.005 returns U+BA10", String.fromCharCode(0xBA10), function(nwang) {
      return nwang.sf3(-1.005);
    }, "-1.001 also returns U+BA10", String.fromCharCode(0xBA10), function(nwang) {
      return nwang.sf3(-1.001);
    }, "-1 also returns U+BA10", String.fromCharCode(0xBA10), function(nwang) {
      return nwang.sf3(-1);
    }, "-0.99999 also returns U+BA10", String.fromCharCode(0xBA10), function(nwang) {
      return nwang.sf3(-0.99999);
    }, "-0.9995001 also returns U+BA10", String.fromCharCode(0xBA10), function(nwang) {
      return nwang.sf3(-0.9995001);
    }, "-0.9995 returns U+BA11", String.fromCharCode(0xBA11), function(nwang) {
      return nwang.sf3(-0.9995);
    }, "-0.999 also returns U+BA11", String.fromCharCode(0xBA11), function(nwang) {
      return nwang.sf3(-0.999);
    }, "-0.100001 returns U+BD94", String.fromCharCode(0xBD94), function(nwang) {
      return nwang.sf3(-0.100001);
    }, "-0.1 also returns U+BD94", String.fromCharCode(0xBD94), function(nwang) {
      return nwang.sf3(-0.1);
    }, "-0.0999999 also returns U+BD94", String.fromCharCode(0xBD94), function(nwang) {
      return nwang.sf3(-0.0999999);
    }, "-0.09995001 also returns U+BD94", String.fromCharCode(0xBD94), function(nwang) {
      return nwang.sf3(-0.09995001);
    }, "-0.09995 returns U+BD95", String.fromCharCode(0xBD95), function(nwang) {
      return nwang.sf3(-0.09995);
    }, "-0.0999 also returns U+BD95", String.fromCharCode(0xBD95), function(nwang) {
      return nwang.sf3(-0.0999);
    }, "-0.0100001 returns U+C118", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.0100001);
    }, "-0.01 also returns U+C118", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.01);
    }, "-0.00999999 also returns U+C118", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.00999999);
    }, "-0.009995001 also returns U+C118", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.009995001);
    }, "-0.009995 _also_ returns U+C119 (rounded to -0.01, _not_ -0.00999)", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.009995);
    }, "-0.00999 also returns U+C119", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.009995);
    }, "-0.0099500001 returns U+C118 (rounded to -0.01)", String.fromCharCode(0xC118), function(nwang) {
      return nwang.sf3(-0.0099500001);
    }, "-0.00995 returns U+C119 (rounded to -0.0099)", String.fromCharCode(0xC119), function(nwang) {
      return nwang.sf3(-0.00995);
    }, "-0.009900123 also returns U+C119", String.fromCharCode(0xC119), function(nwang) {
      return nwang.sf3(-0.009900123);
    }, "-0.0099 also returns U+C119", String.fromCharCode(0xC119), function(nwang) {
      return nwang.sf3(-0.0099);
    }, "-0.0098500001 also returns U+C119", String.fromCharCode(0xC119), function(nwang) {
      return nwang.sf3(-0.0098500001);
    }, "-0.00985 returns U+C11A", String.fromCharCode(0xC11A), function(nwang) {
      return nwang.sf3(-0.00985);
    }, "-0.0002 returns U+C17A", String.fromCharCode(0xC17A), function(nwang) {
      return nwang.sf3(-0.0002);
    }, "-0.000175 also returns U+C17A", String.fromCharCode(0xC17A), function(nwang) {
      return nwang.sf3(-0.000175);
    }, "-0.0001500001 also returns U+C17A", String.fromCharCode(0xC17A), function(nwang) {
      return nwang.sf3(-0.0001500001);
    }, "-0.00015 returns U+C17B", String.fromCharCode(0xC17B), function(nwang) {
      return nwang.sf3(-0.00015);
    }, "-0.0001 also returns U+C17B", String.fromCharCode(0xC17B), function(nwang) {
      return nwang.sf3(-0.0001);
    }, "-0.0000501234 also returns U+C17B", String.fromCharCode(0xC17B), function(nwang) {
      return nwang.sf3(-0.0000501234);
    }, "-0.000050001 also returns U+C17B", String.fromCharCode(0xC17B), function(nwang) {
      return nwang.sf3(-0.000050001);
    }, "-0.00005 returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(-0.00005);
    }, "-0.00004 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(-0.00004);
    }, "-0.0000000001 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(-0.0000000001);
    }, "0 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(0);
    }, "0.0000000001 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(0.0000000001);
    }, "0.0000456789 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(0.0000456789);
    }, "0.0000499999999 also returns U+C17C", String.fromCharCode(0xC17C), function(nwang) {
      return nwang.sf3(0.0000499999999);
    }, "0.00005 returns U+C17D", String.fromCharCode(0xC17D), function(nwang) {
      return nwang.sf3(0.00005);
    }, "0.0000500001 returns U+C17D", String.fromCharCode(0xC17D), function(nwang) {
      return nwang.sf3(0.0000500001);
    }, "0.0000501234 also returns U+C17D", String.fromCharCode(0xC17D), function(nwang) {
      return nwang.sf3(0.0000501234);
    }, "0.0001 also returns U+C17D", String.fromCharCode(0xC17D), function(nwang) {
      return nwang.sf3(0.0001);
    }, "0.00015 also returns U+C17D", String.fromCharCode(0xC17D), function(nwang) {
      return nwang.sf3(0.00015);
    }, "0.0001500001 returns U+C17E", String.fromCharCode(0xC17E), function(nwang) {
      return nwang.sf3(0.0001500001);
    }, "0.000175 also returns U+C17E", String.fromCharCode(0xC17E), function(nwang) {
      return nwang.sf3(0.000175);
    }, "0.0002 also returns U+C17E", String.fromCharCode(0xC17E), function(nwang) {
      return nwang.sf3(0.0002);
    }, "0.00985 returns U+C1DF", String.fromCharCode(0xC1DF), function(nwang) {
      return nwang.sf3(0.00985);
    }, "0.0098500001 also returns U+C1DF", String.fromCharCode(0xC1DF), function(nwang) {
      return nwang.sf3(0.0098500001);
    }, "0.0099 also returns U+C1DF", String.fromCharCode(0xC1DF), function(nwang) {
      return nwang.sf3(0.0099);
    }, "0.009900123 also returns U+C1DF", String.fromCharCode(0xC1DF), function(nwang) {
      return nwang.sf3(0.009900123);
    }, "0.009949999 also returns U+C1DF (rounded to 0.0099)", String.fromCharCode(0xC1DF), function(nwang) {
      return nwang.sf3(0.009949999);
    }, "0.00995 returns U+C1E0 (rounded to 0.01)", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.00995);
    }, "0.0099500001 also returns U+C1E0 (rounded to 0.01)", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.0099500001);
    }, "0.009995 _also_ returns U+C1E0 (rounded to -0.01, _not_ -0.00999)", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.009995);
    }, "0.009995001 also returns U+C1E0", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.009995001);
    }, "0.00999999 also returns U+C1E0", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.00999999);
    }, "0.01 also returns U+C1E0", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.01);
    }, "0.01000001 also returns U+C1E0", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.01000001);
    }, "0.0100499999 also returns U+C1E0", String.fromCharCode(0xC1E0), function(nwang) {
      return nwang.sf3(0.0100499999);
    }, "0.01005 returns U+C1E1", String.fromCharCode(0xC1E1), function(nwang) {
      return nwang.sf3(0.01005);
    }, "0.01014999999 also returns U+C1E1", String.fromCharCode(0xC1E1), function(nwang) {
      return nwang.sf3(0.01014999999);
    }, "0.0102 returns U+C1E2", String.fromCharCode(0xC1E2), function(nwang) {
      return nwang.sf3(0.0102);
    }, "0.09994999 returns U+C563", String.fromCharCode(0xC563), function(nwang) {
      return nwang.sf3(0.09994999);
    }, "0.09995 returns U+C564 (rounded to 0.1)", String.fromCharCode(0xC564), function(nwang) {
      return nwang.sf3(0.09995);
    }, "0.09999999 also returns U+C564", String.fromCharCode(0xC564), function(nwang) {
      return nwang.sf3(0.09999999);
    }, "0.1 also returns U+C564", String.fromCharCode(0xC564), function(nwang) {
      return nwang.sf3(0.1);
    }, "0.100001 also returns U+C564", String.fromCharCode(0xC564), function(nwang) {
      return nwang.sf3(0.100001);
    }, "0.10049999 also returns U+C564", String.fromCharCode(0xC564), function(nwang) {
      return nwang.sf3(0.10049999);
    }, "0.1005 returns U+C565", String.fromCharCode(0xC565), function(nwang) {
      return nwang.sf3(0.1005);
    }, "0.101 also returns U+C565", String.fromCharCode(0xC565), function(nwang) {
      return nwang.sf3(0.101);
    }, "0.10149999 also returns U+C565", String.fromCharCode(0xC565), function(nwang) {
      return nwang.sf3(0.10149999);
    }, "0.99849999 returns U+C8E6", String.fromCharCode(0xC8E6), function(nwang) {
      return nwang.sf3(0.99849999);
    }, "0.9985 returns U+C8E7", String.fromCharCode(0xC8E7), function(nwang) {
      return nwang.sf3(0.9985);
    }, "0.999 also returns U+C8E7", String.fromCharCode(0xC8E7), function(nwang) {
      return nwang.sf3(0.999);
    }, "0.99949999 also returns U+C8E7", String.fromCharCode(0xC8E7), function(nwang) {
      return nwang.sf3(0.99949999);
    }, "0.9995 returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(0.9995);
    }, "0.99999999 also returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(0.99999999);
    }, "1 also returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(1);
    }, "1.000001 also returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(1.000001);
    }, "1.0049999 also returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(1.0049999);
    }, "1.005 also returns U+C8E8", String.fromCharCode(0xC8E8), function(nwang) {
      return nwang.sf3(1.005);
    }, "1.00500001 returns U+C8E9", String.fromCharCode(0xC8E9), function(nwang) {
      return nwang.sf3(1.00500001);
    }, "1.015 also returns U+C8E9", String.fromCharCode(0xC8E9), function(nwang) {
      return nwang.sf3(1.015);
    }, "1.01500001 returns U+C8EA", String.fromCharCode(0xC8EA), function(nwang) {
      return nwang.sf3(1.01500001);
    }, "1.025 also returns U+C8EA", String.fromCharCode(0xC8EA), function(nwang) {
      return nwang.sf3(1.025);
    }, "9.9799 returns U+CC6A", String.fromCharCode(0xCC6A), function(nwang) {
      return nwang.sf3(9.9799);
    }, "9.98 also returns U+CC6A", String.fromCharCode(0xCC6A), function(nwang) {
      return nwang.sf3(9.98);
    }, "9.980001 also returns U+CC6A", String.fromCharCode(0xCC6A), function(nwang) {
      return nwang.sf3(9.980001);
    }, "9.9849999 also returns U+CC6A", String.fromCharCode(0xCC6A), function(nwang) {
      return nwang.sf3(9.9849999);
    }, "9.985 returns U+CC6B", String.fromCharCode(0xCC6B), function(nwang) {
      return nwang.sf3(9.985);
    }, "9.99 also returns U+CC6B", String.fromCharCode(0xCC6B), function(nwang) {
      return nwang.sf3(9.99);
    }, "9.994999 also returns U+CC6B", String.fromCharCode(0xCC6B), function(nwang) {
      return nwang.sf3(9.994999);
    }, "9.995 also returns U+CC6B", String.fromCharCode(0xCC6B), function(nwang) {
      return nwang.sf3(9.995);
    }, "9.995000001 returns U+CC6C", String.fromCharCode(0xCC6C), function(nwang) {
      return nwang.sf3(9.995000001);
    }, "9.999999 also returns U+CC6C", String.fromCharCode(0xCC6C), function(nwang) {
      return nwang.sf3(9.999999);
    }, "10 also returns U+CC6C", String.fromCharCode(0xCC6C), function(nwang) {
      return nwang.sf3(10);
    }, "10.04999 also returns U+CC6C", String.fromCharCode(0xCC6C), function(nwang) {
      return nwang.sf3(10.04999);
    }, "10.05 returns U+CC6D", String.fromCharCode(0xCC6D), function(nwang) {
      return nwang.sf3(10.05);
    }, "10.1 also returns U+CC6D", String.fromCharCode(0xCC6D), function(nwang) {
      return nwang.sf3(10.1);
    }, "10.14999 also returns U+CC6D", String.fromCharCode(0xCC6D), function(nwang) {
      return nwang.sf3(10.14999);
    }, "99.94999 returns U+CFEF", String.fromCharCode(0xCFEF), function(nwang) {
      return nwang.sf3(99.94999);
    }, "99.95 returns U+CFF0", String.fromCharCode(0xCFF0), function(nwang) {
      return nwang.sf3(99.95);
    }, "99.99999 also returns U+CFF0", String.fromCharCode(0xCFF0), function(nwang) {
      return nwang.sf3(99.99999);
    }, "100 also returns U+CFF0", String.fromCharCode(0xCFF0), function(nwang) {
      return nwang.sf3(100);
    }, "100.4999 also returns U+CFF0", String.fromCharCode(0xCFF0), function(nwang) {
      return nwang.sf3(100.4999);
    }, "100.5 returns U+CFF1", String.fromCharCode(0xCFF1), function(nwang) {
      return nwang.sf3(100.5);
    }, "101.49876 also returns U+CFF1", String.fromCharCode(0xCFF1), function(nwang) {
      return nwang.sf3(101.49876);
    }, "999 returns U+D373", String.fromCharCode(0xD373), function(nwang) {
      return nwang.sf3(999);
    }, "999.49999 also returns U+D373", String.fromCharCode(0xD373), function(nwang) {
      return nwang.sf3(999.49999);
    }, "999.5 returns U+D374", String.fromCharCode(0xD374), function(nwang) {
      return nwang.sf3(999.5);
    }, "999.999987654321 also returns U+D374", String.fromCharCode(0xD374), function(nwang) {
      return nwang.sf3(999.999987654321);
    }, "1000 also returns U+D374", String.fromCharCode(0xD374), function(nwang) {
      return nwang.sf3(1000);
    }, "1004.9999 also returns U+D374", String.fromCharCode(0xD374), function(nwang) {
      return nwang.sf3(1004.9999);
    }, "1005 returns U+D375", String.fromCharCode(0xD375), function(nwang) {
      return nwang.sf3(1005);
    }, "1010 also returns U+D375", String.fromCharCode(0xD375), function(nwang) {
      return nwang.sf3(1010);
    }, "1014.9999 also returns U+D375", String.fromCharCode(0xD375), function(nwang) {
      return nwang.sf3(1014.9999);
    }, "1015 returns U+D376", String.fromCharCode(0xD376), function(nwang) {
      return nwang.sf3(1015);
    }, "9994.89 returns U+D6F7", String.fromCharCode(0xD6F7), function(nwang) {
      return nwang.sf3(9994.89);
    }, "9995 returns U+D6F8", String.fromCharCode(0xD6F8), function(nwang) {
      return nwang.sf3(9995);
    }, "9999 also returns U+D6F8", String.fromCharCode(0xD6F8), function(nwang) {
      return nwang.sf3(9999);
    }, "9999.999 also returns U+D6F8", String.fromCharCode(0xD6F8), function(nwang) {
      return nwang.sf3(9999.999);
    }, "10000 also returns U+D6F8", String.fromCharCode(0xD6F8), function(nwang) {
      return nwang.sf3(10000);
    }, "Converts glyphs to numbers as expected", tudor.equal, "U+AC00 returns -10000", '-10000', function(nwang) {
      return nwang.sf3('\uAC00');
    }, "U+AC01 returns -9990", '-9990', function(nwang) {
      return nwang.sf3('\uAC01');
    }, "U+AF84 returns -9990", '-1000', function(nwang) {
      return nwang.sf3('\uAF84');
    }, "U+AF85 returns -999", '-999', function(nwang) {
      return nwang.sf3('\uAF85');
    }, "U+AF86 returns -998", '-998', function(nwang) {
      return nwang.sf3('\uAF86');
    }, "U+B307 returns -101", '-101', function(nwang) {
      return nwang.sf3('\uB307');
    }, "U+B308 returns -100", '-100', function(nwang) {
      return nwang.sf3('\uB308');
    }, "U+B309 returns -99.9", '-99.9', function(nwang) {
      return nwang.sf3('\uB309');
    }, "U+B30A returns -99.8", '-99.8', function(nwang) {
      return nwang.sf3('\uB30A');
    }, "U+B68B returns -10.1", '-10.1', function(nwang) {
      return nwang.sf3('\uB68B');
    }, "U+B68C returns -10", '-10.0', function(nwang) {
      return nwang.sf3('\uB68C');
    }, "U+B68D returns -9.99", '-9.99', function(nwang) {
      return nwang.sf3('\uB68D');
    }, "U+B68E returns -9.98", '-9.98', function(nwang) {
      return nwang.sf3('\uB68E');
    }, "U+BA0F returns -1.01", '-1.01', function(nwang) {
      return nwang.sf3('\uBA0F');
    }, "U+BA10 returns -1.00", '-1.00', function(nwang) {
      return nwang.sf3('\uBA10');
    }, "U+BA11 returns -0.999", '-0.999', function(nwang) {
      return nwang.sf3('\uBA11');
    }, "U+BA12 returns -0.998", '-0.998', function(nwang) {
      return nwang.sf3('\uBA12');
    }, "U+BD93 returns -0.101", '-0.101', function(nwang) {
      return nwang.sf3('\uBD93');
    }, "U+BD94 returns -0.100", '-0.100', function(nwang) {
      return nwang.sf3('\uBD94');
    }, "U+BD95 returns -0.0999", '-0.0999', function(nwang) {
      return nwang.sf3('\uBD95');
    }, "U+BD96 returns -0.0998", '-0.0998', function(nwang) {
      return nwang.sf3('\uBD96');
    }, "U+C117 returns -0.0101", '-0.0101', function(nwang) {
      return nwang.sf3('\uC117');
    }, "U+C118 returns -0.0100", '-0.0100', function(nwang) {
      return nwang.sf3('\uC118');
    }, "U+C119 returns -0.0099", '-0.0099', function(nwang) {
      return nwang.sf3('\uC119');
    }, "U+C11A returns -0.0098", '-0.0098', function(nwang) {
      return nwang.sf3('\uC11A');
    }, "U+C17B returns -0.0001", '-0.0001', function(nwang) {
      return nwang.sf3('\uC17B');
    }, "U+C17C returns 0.0000", '0.0000', function(nwang) {
      return nwang.sf3('\uC17C');
    }, "U+C17D returns 0.0001", '0.0001', function(nwang) {
      return nwang.sf3('\uC17D');
    }, "U+C1DE returns 0.0098", '0.0098', function(nwang) {
      return nwang.sf3('\uC1DE');
    }, "U+C1DF returns 0.0099", '0.0099', function(nwang) {
      return nwang.sf3('\uC1DF');
    }, "U+C1E0 returns 0.0100", '0.0100', function(nwang) {
      return nwang.sf3('\uC1E0');
    }, "U+C1E1 returns 0.0101", '0.0101', function(nwang) {
      return nwang.sf3('\uC1E1');
    }, "U+C562 returns 0.0998", '0.0998', function(nwang) {
      return nwang.sf3('\uC562');
    }, "U+C563 returns 0.0999", '0.0999', function(nwang) {
      return nwang.sf3('\uC563');
    }, "U+C564 returns 0.100", '0.100', function(nwang) {
      return nwang.sf3('\uC564');
    }, "U+C565 returns 0.101", '0.101', function(nwang) {
      return nwang.sf3('\uC565');
    }, "U+C8E6 returns 0.998", '0.998', function(nwang) {
      return nwang.sf3('\uC8E6');
    }, "U+C8E7 returns 0.999", '0.999', function(nwang) {
      return nwang.sf3('\uC8E7');
    }, "U+C8E8 returns 1.00", '1.00', function(nwang) {
      return nwang.sf3('\uC8E8');
    }, "U+C8E9 returns 1.01", '1.01', function(nwang) {
      return nwang.sf3('\uC8E9');
    }, "U+CC6A returns 9.98", '9.98', function(nwang) {
      return nwang.sf3('\uCC6A');
    }, "U+CC6B returns 9.99", '9.99', function(nwang) {
      return nwang.sf3('\uCC6B');
    }, "U+CC6C returns 10.0", '10.0', function(nwang) {
      return nwang.sf3('\uCC6C');
    }, "U+CC6D returns 10.1", '10.1', function(nwang) {
      return nwang.sf3('\uCC6D');
    }, "U+CFEE returns 99.8", '99.8', function(nwang) {
      return nwang.sf3('\uCFEE');
    }, "U+CFEF returns 99.9", '99.9', function(nwang) {
      return nwang.sf3('\uCFEF');
    }, "U+CFF0 returns 100", '100', function(nwang) {
      return nwang.sf3('\uCFF0');
    }, "U+CFF1 returns 101", '101', function(nwang) {
      return nwang.sf3('\uCFF1');
    }, "U+D372 returns 998", '998', function(nwang) {
      return nwang.sf3('\uD372');
    }, "U+D373 returns 999", '999', function(nwang) {
      return nwang.sf3('\uD373');
    }, "U+D374 returns 1000", '1000', function(nwang) {
      return nwang.sf3('\uD374');
    }, "U+D375 returns 1010", '1010', function(nwang) {
      return nwang.sf3('\uD375');
    }, "U+D6F6 returns 9980", '9980', function(nwang) {
      return nwang.sf3('\uD6F6');
    }, "U+D6F7 returns 9990", '9990', function(nwang) {
      return nwang.sf3('\uD6F7');
    }, "U+D6F8 returns 10000", '10000', function(nwang) {
      return nwang.sf3('\uD6F8');
    }
  ]);

}).call(this);
